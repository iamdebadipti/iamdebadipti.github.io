{"version":3,"sources":["webpack:///./src/styles/Index.module.scss","webpack:///./src/components/Bio.js","webpack:///./src/pages/index.js","webpack:///./src/styles/Bio.module.scss"],"names":["module","exports","Bio","value","useDarkMode","useStaticQuery","site","siteMetadata","author","name","bio","contact","EMAIL","GITHUB","className","styles","bio_hello","bio_hello_wave","role","aria-label","bio_title","bio_desc","bio_social","href","link","target","rel","bio_social_link","getIcon","BlogIndex","data","location","posts","allMarkdownRemark","edges","Layout","article","title","description","index","index_heading","index_article_wrap","map","node","frontmatter","fields","slug","key","id","to","index_article","dateTime","date","timeToRead","dangerouslySetInnerHTML","__html","excerpt"],"mappings":"gFACAA,EAAOC,QAAU,CAAC,MAAQ,6BAA6B,cAAgB,qCAAqC,mBAAqB,0CAA0C,cAAgB,uC,2HCkE5KC,EA5DH,WAAO,IACTC,EAAUC,aAAY,GAAtBD,MADQ,EAGHE,yBAAe,cA8BnBC,KAAKC,aALZC,OACEC,EA7BY,EA6BZA,KACAC,EA9BY,EA8BZA,IA9BY,IA+BZC,QAAWC,EA/BC,EA+BDA,MAAOC,EA/BN,EA+BMA,OAItB,OACE,4BAAQC,UAAWC,IAAOL,KACxB,0BAAMI,UAAWC,IAAOC,WACtB,0BAAMF,UAAWC,IAAOE,eAAgBC,KAAK,MAAMC,aAAW,mBAA9D,MADF,YAMA,wBAAIL,UAAWC,IAAOK,WAAYX,GAClC,uBAAGK,UAAWC,IAAOM,UAAWX,GAEhC,yBAAKI,UAAWC,IAAOO,YACrB,uBAAGC,KAAMX,EAAMY,KAAMC,OAAO,SAASC,IAAI,aAAaZ,UAAWC,IAAOY,iBACrEC,YAAQ,QAAS,MACjBhB,EAAMH,MAET,uBAAGc,KAAMV,EAAOW,KAAMC,OAAO,SAASC,IAAI,aAAaZ,UAAWC,IAAOY,iBACtEC,YAAQ,SAAU,KAAMzB,EAAQ,UAAY,WAD/C,a,6CCNO0B,UA1CG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACjBvB,EAAWsB,EAAKxB,KAAKC,aAArBC,OACFwB,EAAQF,EAAKG,kBAAkBC,MAErC,OACE,kBAACC,EAAA,EAAD,CAAQJ,SAAUA,GAChB,kBAAC,IAAD,CAAKK,SAAO,EAACC,MAAO,eAAgBC,YAAa9B,EAAOE,MACxD,kBAAC,EAAD,MAEA,yBAAKI,UAAWC,IAAOwB,OACrB,wBAAIzB,UAAWC,IAAOyB,eAAtB,WACW,IACT,0BAAMrB,aAAW,GAAGD,KAAK,OAAzB,OAIF,yBAAKJ,UAAWC,IAAO0B,oBACpBT,EAAMU,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACNN,EAAQM,EAAKC,YAAYP,OAASM,EAAKE,OAAOC,KACpD,OACE,kBAAC,OAAD,CAAMC,IAAKJ,EAAKK,GAAIC,GAAIN,EAAKE,OAAOC,KAAMhC,UAAWC,IAAOmC,eAC1D,iCACE,4BAAKb,GACL,2CACY,0BAAMc,SAAUR,EAAKC,YAAYQ,MAAOT,EAAKC,YAAYQ,MAAa,IADlF,KAEKT,EAAKU,WAFV,aAIA,uBACEC,wBAAyB,CACvBC,OAAQZ,EAAKa,qB,qBCtCnCxD,EAAOC,QAAU,CAAC,IAAM,yBAAyB,UAAY,+BAA+B,eAAiB,oCAAoC,SAAW,8BAA8B,UAAY,+BAA+B,SAAW,8BAA8B,WAAa,gCAAgC,gBAAkB","file":"component---src-pages-index-js-df83e2f606f50e89266a.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"index\":\"Index-module--index--1fsO3\",\"index_heading\":\"Index-module--index_heading--2Pxya\",\"index_article_wrap\":\"Index-module--index_article_wrap--38VG3\",\"index_article\":\"Index-module--index_article--1et_c\"};","import React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\n// import Image from 'gatsby-image';\nimport styles from '../styles/Bio.module.scss';\nimport { getIcon } from '../utils';\nimport useDarkMode from 'use-dark-mode';\n\nconst Bio = () => {\n  const { value } = useDarkMode(false);\n\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          title\n          author {\n            name\n            bio\n            contact {\n              EMAIL {\n                name\n                link\n              }\n              GITHUB {\n                name\n                link\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const {\n    author: {\n      name,\n      bio,\n      contact: { EMAIL, GITHUB }\n    }\n  } = data.site.siteMetadata;\n\n  return (\n    <header className={styles.bio}>\n      <span className={styles.bio_hello}>\n        <span className={styles.bio_hello_wave} role=\"img\" aria-label=\"Hand Wave Emoji\">\n          üëã\n        </span>\n        Hey, I'm\n      </span>\n      <h1 className={styles.bio_title}>{name}</h1>\n      <p className={styles.bio_desc}>{bio}</p>\n      {/* {useIcon('twitter', '1.4rem')} */}\n      <div className={styles.bio_social}>\n        <a href={EMAIL.link} target=\"_blank\" rel=\"noreferrer\" className={styles.bio_social_link}>\n          {getIcon('EMAIL', '18')}\n          {EMAIL.name}\n        </a>\n        <a href={GITHUB.link} target=\"_blank\" rel=\"noreferrer\" className={styles.bio_social_link}>\n          {getIcon('GITHUB', '18', value ? '#F1F1F1' : '#343434')}\n          GitHub\n        </a>\n      </div>\n    </header>\n  );\n};\n\nexport default Bio;\n","// Gatsby supports TypeScript natively!\nimport React from 'react';\n\nimport { Link, graphql } from 'gatsby';\nimport Bio from '../components/Bio';\nimport Layout from '../components/Layout';\nimport styles from '../styles/Index.module.scss';\nimport SEO from '../components/Seo';\n// import Skills from '../components/Skills';\n\nconst BlogIndex = ({ data, location }) => {\n  const { author } = data.site.siteMetadata;\n  const posts = data.allMarkdownRemark.edges;\n\n  return (\n    <Layout location={location}>\n      <SEO article title={'üëã Hey There'} description={author.bio} />\n      <Bio />\n      {/* <Skills /> */}\n      <div className={styles.index}>\n        <h3 className={styles.index_heading}>\n          My Posts{' '}\n          <span aria-label=\"\" role=\"img\">\n            ‚úèÔ∏è\n          </span>\n        </h3>\n        <div className={styles.index_article_wrap}>\n          {posts.map(({ node }) => {\n            const title = node.frontmatter.title || node.fields.slug;\n            return (\n              <Link key={node.id} to={node.fields.slug} className={styles.index_article}>\n                <article>\n                  <h2>{title}</h2>\n                  <span>\n                    Posted on <time dateTime={node.frontmatter.date}>{node.frontmatter.date}</time>{' '}\n                    - {node.timeToRead} min read\n                  </span>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: node.excerpt\n                    }}\n                  />\n                </article>\n              </Link>\n            );\n          })}\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        author {\n          bio\n        }\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          id\n          timeToRead\n          excerpt(pruneLength: 240)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bio\":\"Bio-module--bio--3Nu3Y\",\"bio_hello\":\"Bio-module--bio_hello--1TpWM\",\"bio_hello_wave\":\"Bio-module--bio_hello_wave--1YKIy\",\"waveAnim\":\"Bio-module--waveAnim--3UHM-\",\"bio_title\":\"Bio-module--bio_title--2eqPe\",\"bio_desc\":\"Bio-module--bio_desc--fjKkf\",\"bio_social\":\"Bio-module--bio_social--3wuAi\",\"bio_social_link\":\"Bio-module--bio_social_link--3dkR7\"};"],"sourceRoot":""}